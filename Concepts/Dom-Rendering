# How Browsers Render HTML, CSS, and JavaScript to the DOM

Browsers are software applications designed to load and display files, such as HTML, CSS, and JavaScript, from a local machine or a remote server. The process of rendering web pages involves multiple steps, executed by the browser's rendering engine.

## 1. Parsing HTML and Building the DOM

1. **Tokenization**: When the browser loads an HTML file, it reads the file byte by byte, converts these bytes into characters, and tokenizes them. These tokens are then parsed into the Document Object Model (DOM), a tree-like structure representing the content of the web page.

2. **DOM Construction**: Each HTML tag becomes a node in this tree. The DOM is a structured representation of the HTML document, and it is key to how the browser knows what to display.

## 2. Handling CSS with CSSOM

Once the HTML has been parsed, the browser begins constructing the CSS Object Model (CSSOM) from any external stylesheets or internal `<style>` elements. The CSSOM, like the DOM, is a tree structure and is combined with the DOM to create the **Render Tree**.

- **DOM + CSSOM = Render Tree**

CSS properties like `display: none` affect the render tree, making elements invisible but still part of the DOM.

## 3. JavaScript Execution and Interaction

JavaScript can manipulate both the DOM and CSSOM through various APIs. However, when the browser encounters a `<script>` tag, DOM construction is paused until the script is downloaded and executed, especially if it is placed at the top of the document.

To avoid blocking rendering, it's a best practice to place script tags at the end of the body, or use the `async` or `defer` attributes.

## 4. Rendering and Painting

1. **Layout (Reflow)**: After combining the DOM and CSSOM into the render tree, the browser calculates the size and position of each element on the page.

2. **Painting**: The browser paints the pixels to the screen based on the calculated layout.

3. **Compositing**: For complex elements, the browser may separate parts of the page into layers and composite them together for rendering efficiency.

---

## References

- [How Browsers Work](https://blog.logrocket.com/how-browser-rendering-works-behind-scenes/)
- [MDN Web Docs - Document Object Model (DOM)](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)
